
syntax = "proto3";
option java_multiple_files = true;
option java_package = "com.nrook.kadabra.proto";

package kadabra;

import "common.proto";

service TeamService {
  // Ask for a team.
  rpc GetTeam(TeamRequest) returns (TeamSpec) {}
}

// Makes decisions during battle.
service BattleService {
  rpc ChooseLead(LeadRequest) returns (LeadChoice) {}

  // Decide what to do at the start of a turn.
  rpc SelectAction(ActionRequest) returns (ActionResponse) {}
}

message TeamRequest {
  string metagame = 1;
}

message TeamSpec {
  repeated PokemonSpec pokemon = 1;
}

// Information about which battle is actually happening.
// Used for continuity: there is more information about a battle than is sent
// in a single request.
message Room {
  // The name of the room where the battle takes place.
  string name = 1;
}

message LeadRequest {
}

message LeadChoice {
  // The index of the lead to choose.
  // Varies between 1 and 6.
  int32 leadIndex = 1;
}

// Information we have about our side's Pokemon.
message SideInfo {
  repeated PokemonSideInfo team = 1;
}

message PokemonSideInfo {
  string species = 1;

  int32 hp = 2;

  int32 maxHp = 3;

  bool fainted = 4;

  // Whether or not this Pokemon is active.
  bool active = 6;

  string item = 5;
}

message ActionRequest {
  Room room = 1;

  // All logged messages up to this point in the battle.
  repeated LogLine log = 6;

  // Move information available for the acting Pokemon.
  //
  // If force_switch is true, MoveStatus should be empty: if we have to switch, after all, there
  // is no way we can make a move.
  repeated MoveStatus move = 2;

  // Whether or not we are "trapped" by a move like Outrage, able only to
  // continue doing what we're doing. If "trapped" is true, we cannot even
  // switch.
  //
  // Not yet used.
  bool trapped = 3;

  // Whether or not we must switch.
  //
  // force_switch is true in two situations:
  // - At the end of a turn, when our Pokemon faints, and we must bring a new one out.
  // - During the middle of a turn, after our Pokemon uses a move such as U-Turn or Parting Shot
  // that allows us to send out a replacement Pokemon.
  bool forceSwitch = 4;

  // Information about our available Pokemon.
  SideInfo sideInfo = 5;

  // The team with which we began this battle.
  repeated PokemonSpec teamSpec = 7;
}

message ActionResponse {
  oneof action {
    MoveSelection move = 1;
    SwitchSelection switch = 2;
  }
}

// Represents selecting a move.
message MoveSelection {
  // The index of the move to select.
  int32 index = 1;

  // Whether or not we should Mega Evolve the current Pokemon.
  bool mega_evolve = 2;
}

// Represents deciding to switch Pokemon.
message SwitchSelection {

  // The index of the new Pokemon to send out.
  int32 index = 1;
}

// The status of each move of the active Pokemon.
message MoveStatus {
  // The move's ID, for example "flareblitz"
  string id = 1;

  // The move's current PP.
  // If we are trapped, this is omitted.
  int32 pp = 2;

  // The move's maximum PP.
  // If we are trapped, this is omitted.
  int32 maxpp = 3;

  // The Pokemon Showdown server sends a value called "target" here, but I'm
  // not sure exactly what it means. Perhaps it appears in Doubles?

  // Whether or not the move has been disabled, by an enemy move like Disable.
  // TODO: Do moves such as Taunt cause this to be set?
  // If we are trapped, this is omitted.
  bool disabled = 4;
}

message PokemonSpec {

  // The kind of Pokemon this is.
  // Calling this "species" is slightly inaccurate. Rather, this is the
  // canonical name of the Pokemon type in Pokemon Showdown. For instance,
  // Alolan Marowak is called Marowak-Alola, not Marowak.
  string species = 1;

  // The Pokemon's ability, e.g. "Synchronize".
  // TODO: Pokemon Showdown's wire format serializes this as an integer based
  // on which index ability this is. As such, we'll have to send that over the
  // wire here, too. Ugh.
  string ability = 2;

  EvSpread evs = 3;

  IvSpread ivs = 4;

  // The Pokemon's item. If absent, no item will be used.
  string item = 5;

  Nature nature = 6;

  // The Pokemon's moveset. Must be nonempty.
  repeated string move = 7;
}

// Legal values for each stat here range from 0 to 252.
message EvSpread {
  int32 hp = 1;
  int32 attack = 2;
  int32 defense = 3;
  int32 specialAttack = 4;
  int32 specialDefense = 5;
  int32 speed = 6;
}

// Legal values for each stat here range from 0 to 31.
// Be aware: If omitted, the default is ZERO!
message IvSpread {
  int32 hp = 1;
  int32 attack = 2;
  int32 defense = 3;
  int32 specialAttack = 4;
  int32 specialDefense = 5;
  int32 speed = 6;
}


enum Nature {
  HARDY = 0;
  LONELY = 1;
  BRAVE = 2;
  ADAMANT = 3;
  NAUGHTY = 4;
  BOLD = 5;
  DOCILE = 6;
  RELAXED = 7;
  IMPISH = 8;
  LAX = 9;
  TIMID = 10;
  HASTY = 11;
  SERIOUS = 12;
  JOLLY = 13;
  NAIVE = 14;
  MODEST = 15;
  MILD = 16;
  QUIET = 17;
  BASHFUL = 18;
  RASH = 19;
  CALM = 20;
  GENTLE = 21;
  SASSY = 22;
  CAREFUL = 23;
  QUIRKY = 24;
}
